{"version":3,"sources":["components/pages/login/Login.js"],"names":["useState","isSignedIn","useIsSignedIn","uiConfig","queryParameterForWidgetMode","queryParameterForSignInSuccessUrl","signInFlow","signInSuccessUrl","signInOptions","provider","firebase","auth","EmailAuthProvider","PROVIDER_ID","requireDisplayName","GoogleAuthProvider","FacebookAuthProvider","scopes","customParameters","auth_type","TwitterAuthProvider","GithubAuthProvider","immediateFederatedRedirect","tosUrl","privacyPolicyUrl","callbacks","signInSuccessWithAuthResult","window","location","assign","unregisterAuthObserver","onAuthStateChanged","user","useEffect","container","direction","justify","alignItems","variant","component","color","onClick","signOut","firebaseAuth"],"mappings":"oOAae,qBAAM,MAEeA,oBAAS,GAFxB,mBAEdC,EAFc,KAEFC,EAFE,KAKbC,EAAW,CAEfC,4BAA6B,OAE7BC,kCAAmC,mBAEnCC,WAAY,QAEZC,iBAAkB,QAElBC,cAAe,CAEb,CACEC,SAAUC,IAASC,KAAKC,kBAAkBC,YAE1CC,oBAAoB,GAGtBJ,IAASC,KAAKI,mBAAmBF,YAEjC,CACEJ,SAAUC,IAASC,KAAKK,qBAAqBH,YAC7CI,OAAQ,CACN,iBACA,QACA,gBAEFC,iBAAkB,CAEhBC,UAAW,mBAIfT,IAASC,KAAKS,oBAAoBP,YAElCH,IAASC,KAAKU,mBAAmBR,aAGnCS,4BAA4B,EAE5BC,OAAQ,iBAERC,iBAAkB,gBAClBC,UAAW,CAETC,4BAA6B,kBAAMC,OAAOC,SAASC,OAAO,WAIxDC,EAAyBpB,IAASC,OAAOoB,mBAAmB,SAACC,GAAD,OAAW9B,EAAcD,IAAe+B,KAM1G,OAJAC,oBACE,WAAQH,MAGL7B,EAuBH,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEiC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,UAEX,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,yBAGA,kBAAC,IAAD,CAAYD,QAAQ,KAAKC,UAAU,MAAnC,gDAGA,kBAAC,IAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAM/B,IAASC,OAAO+B,YAAvD,kBAjCF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACER,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,UAEX,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,yBAGA,kBAAC,IAAD,CAAYD,QAAQ,KAAKC,UAAU,MAAnC,gCAGA,kBAAC,IAAD,CAAoBpC,SAAUA,EAAUwC,aAAcjC,IAASC","file":"static/js/18.29661e2f.chunk.js","sourcesContent":["//Importacion de React.\nimport React, { useState, useEffect } from 'react';\n//Importacion de MaterialUI, para el estilo visual.\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n//Importacion de un componente pre-configurado de FirebaseAuth.\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n//Importacion de Firebase.\nimport firebase from '../../Firebase';\n\n//Este componente genera error con las reglas del hook, es necesario pasarlo como anonimo para evitar eso.\nexport default () => {\n  //Estado local para asignacion y comprobacion si esta loggeado. Se podria usar tranquilamente el contexto, pero como ya pasamos Firebase, usamos eso.\n  let [isSignedIn, useIsSignedIn] = useState(false);\n\n  // Configuracion de FirebaseUIAuth.\n  const uiConfig = {\n    //Nombre del parametro de consulta para modo.\n    queryParameterForWidgetMode: 'mode',\n    //Nombre del parametro de consulta, para logeo exitoso url.\n    queryParameterForSignInSuccessUrl: 'signInSuccessUrl',\n    //Opcion de flujo para ventana popup o redireccion.\n    signInFlow: 'popup',\n    //Redirecion despues de logeo exitoso. Alternativamente podemos pasarle una url, string literal o callback.\n    signInSuccessUrl: '/home',\n    //Los providers que le pasaremos para usar.\n    signInOptions: [\n      //Provider de email y password, usando el sistema de registro.\n      {\n        provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n        //Requerimos que se escriba el nombre de usuario.\n        requireDisplayName: true\n      },\n      //Provider de Google.\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      //Provider de Facebook, con seteo de opciones.\n      {\n        provider: firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n        scopes: [\n          'public_profile',\n          'email',\n          'user_friends'\n        ],\n        customParameters: {\n          //Forzamos a que se reautentique.\n          auth_type: 'reauthenticate'\n        }\n      },\n      //Provider de Twitter.\n      firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n      //Provider de GitHub.\n      firebase.auth.GithubAuthProvider.PROVIDER_ID,\n    ],\n    //Colocar en verdadero si tu tiene solo un Provider general como Google y tu quieres que inmediatamente se redireccione y muestre ese Provider. Para que esto tome efecto, la opcion signInFlow, necesita estar en 'redirect'.\n    immediateFederatedRedirect: false,\n    //Opcion para colocar la url, string literal o funcion callback para mostrar los terminos de servicios.\n    tosUrl: 'termsofservice',\n    //Opcion para colocar la url, string literal o funcion callback para mostrar la politica y privicidad.\n    privacyPolicyUrl: 'privacypolicy',\n    callbacks: {\n      //Funcion de redireccion en caso correcto de autenticacion.\n      signInSuccessWithAuthResult: () => window.location.assign('home')\n    }\n  };\n  //Constante donde se registra un observador, para revisar el estado del usuario en cuanto a su autenticacion.\n  const unregisterAuthObserver = firebase.auth().onAuthStateChanged((user) => (useIsSignedIn(isSignedIn = !!user)));\n  //Efecto para manejar el observador en cada renderizado.\n  useEffect(\n    () => { unregisterAuthObserver() }\n  );\n  //Renderizado condicional, depende si se esta logeado o no.\n  if (!isSignedIn) {\n    //Renderizado en caso de no estar logeado.\n    return (\n      <Paper>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Typography variant=\"h3\" component=\"h3\">\n            Invertir en Argentina\n          </Typography>\n          <Typography variant=\"h4\" component=\"h4\">\n            Por favor, inicia sesión:\n          </Typography>\n          <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n        </Grid>\n      </Paper>\n    );\n  }\n  //Renderizado en caso de estar logeado. Aca solo se puede llegar, escribiendo la url manualmente o a travez del historialpush.\n  return (\n    <Paper>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Typography variant=\"h3\" component=\"h3\">\n          Invertir en Argentina\n        </Typography>\n        <Typography variant=\"h4\" component=\"h4\">\n          ¡Ya has iniciado sesión correctamente!\n      </Typography>\n        <Button color=\"primary\" onClick={() => firebase.auth().signOut()}>Des-logearse</Button>\n      </Grid>\n    </Paper>\n  );\n};"],"sourceRoot":""}